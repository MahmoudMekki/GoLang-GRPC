// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cal_pb/calpb.proto

package calpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SumRequest struct {
	Number1              int32    `protobuf:"varint,1,opt,name=number1,proto3" json:"number1,omitempty"`
	Number2              int32    `protobuf:"varint,2,opt,name=number2,proto3" json:"number2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5821de89437ea8b, []int{0}
}

func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (m *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(m, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetNumber1() int32 {
	if m != nil {
		return m.Number1
	}
	return 0
}

func (m *SumRequest) GetNumber2() int32 {
	if m != nil {
		return m.Number2
	}
	return 0
}

type SumResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5821de89437ea8b, []int{1}
}

func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (m *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(m, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*SumRequest)(nil), "calpb.SumRequest")
	proto.RegisterType((*SumResponse)(nil), "calpb.SumResponse")
}

func init() { proto.RegisterFile("cal_pb/calpb.proto", fileDescriptor_c5821de89437ea8b) }

var fileDescriptor_c5821de89437ea8b = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x4e, 0xcc, 0x89,
	0x2f, 0x48, 0xd2, 0x4f, 0x4e, 0xcc, 0x29, 0x48, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x73, 0x94, 0x1c, 0xb8, 0xb8, 0x82, 0x4b, 0x73, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0x24, 0xb8, 0xd8, 0xf3, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x0c, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x58, 0x83, 0x60, 0x5c, 0x84, 0x8c, 0x91, 0x04, 0x13, 0xb2, 0x8c, 0x91, 0x92, 0x2a, 0x17, 0x37,
	0xd8, 0x84, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x31, 0x2e, 0xb6, 0xa2, 0xd4, 0xe2, 0xd2,
	0x9c, 0x12, 0xa8, 0x09, 0x50, 0x9e, 0x91, 0x39, 0x17, 0x73, 0x71, 0x69, 0xae, 0x90, 0x01, 0x17,
	0x6b, 0x62, 0x4a, 0x4a, 0x6a, 0x91, 0x90, 0xa0, 0x1e, 0xc4, 0x35, 0x08, 0xdb, 0xa5, 0x84, 0x90,
	0x85, 0x20, 0xc6, 0x29, 0x31, 0x24, 0xb1, 0x81, 0xdd, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x9f, 0x36, 0x6b, 0xaa, 0xc5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SumClient is the client API for Sum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SumClient interface {
	Adder(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
}

type sumClient struct {
	cc *grpc.ClientConn
}

func NewSumClient(cc *grpc.ClientConn) SumClient {
	return &sumClient{cc}
}

func (c *sumClient) Adder(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calpb.sum/adder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SumServer is the server API for Sum service.
type SumServer interface {
	Adder(context.Context, *SumRequest) (*SumResponse, error)
}

// UnimplementedSumServer can be embedded to have forward compatible implementations.
type UnimplementedSumServer struct {
}

func (*UnimplementedSumServer) Adder(ctx context.Context, req *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Adder not implemented")
}

func RegisterSumServer(s *grpc.Server, srv SumServer) {
	s.RegisterService(&_Sum_serviceDesc, srv)
}

func _Sum_Adder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServer).Adder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calpb.sum/Adder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServer).Adder(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sum_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calpb.sum",
	HandlerType: (*SumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "adder",
			Handler:    _Sum_Adder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cal_pb/calpb.proto",
}
