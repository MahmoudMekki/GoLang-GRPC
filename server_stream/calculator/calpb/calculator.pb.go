// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator/calpb/calculator.proto

package calpb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrimeRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeRequest) Reset()         { *m = PrimeRequest{} }
func (m *PrimeRequest) String() string { return proto.CompactTextString(m) }
func (*PrimeRequest) ProtoMessage()    {}
func (*PrimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48639ba9291a8650, []int{0}
}

func (m *PrimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeRequest.Unmarshal(m, b)
}
func (m *PrimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeRequest.Marshal(b, m, deterministic)
}
func (m *PrimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeRequest.Merge(m, src)
}
func (m *PrimeRequest) XXX_Size() int {
	return xxx_messageInfo_PrimeRequest.Size(m)
}
func (m *PrimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeRequest proto.InternalMessageInfo

func (m *PrimeRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PrimeResponse struct {
	Prime                int32    `protobuf:"varint,1,opt,name=prime,proto3" json:"prime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeResponse) Reset()         { *m = PrimeResponse{} }
func (m *PrimeResponse) String() string { return proto.CompactTextString(m) }
func (*PrimeResponse) ProtoMessage()    {}
func (*PrimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48639ba9291a8650, []int{1}
}

func (m *PrimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeResponse.Unmarshal(m, b)
}
func (m *PrimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeResponse.Marshal(b, m, deterministic)
}
func (m *PrimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeResponse.Merge(m, src)
}
func (m *PrimeResponse) XXX_Size() int {
	return xxx_messageInfo_PrimeResponse.Size(m)
}
func (m *PrimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeResponse proto.InternalMessageInfo

func (m *PrimeResponse) GetPrime() int32 {
	if m != nil {
		return m.Prime
	}
	return 0
}

func init() {
	proto.RegisterType((*PrimeRequest)(nil), "calpb.PrimeRequest")
	proto.RegisterType((*PrimeResponse)(nil), "calpb.PrimeResponse")
}

func init() { proto.RegisterFile("calculator/calpb/calculator.proto", fileDescriptor_48639ba9291a8650) }

var fileDescriptor_48639ba9291a8650 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x4f, 0x4e, 0xcc, 0x29, 0x48, 0xd2, 0x47, 0x08, 0xe8,
	0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xb1, 0x82, 0xc5, 0x95, 0xd4, 0xb8, 0x78, 0x02, 0x8a, 0x32,
	0x73, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb8, 0xd8, 0xf2, 0x4a, 0x73,
	0x93, 0x52, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0xa0, 0x3c, 0x25, 0x55, 0x2e, 0x5e,
	0xa8, 0xba, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0x02, 0x90, 0x00, 0x54,
	0x1d, 0x84, 0x63, 0xe4, 0x00, 0x15, 0x15, 0x32, 0xe7, 0x62, 0x03, 0x33, 0x8a, 0x85, 0x84, 0xf5,
	0xc0, 0x36, 0xe9, 0x21, 0x5b, 0x23, 0x25, 0x82, 0x2a, 0x08, 0x31, 0x53, 0x89, 0xc1, 0x80, 0xd1,
	0x89, 0x3d, 0x0a, 0xe2, 0xb2, 0x24, 0x36, 0xb0, 0x3b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x55, 0x07, 0xb5, 0xfb, 0xcc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrimeClient is the client API for Prime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrimeClient interface {
	Primes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (Prime_PrimesClient, error)
}

type primeClient struct {
	cc *grpc.ClientConn
}

func NewPrimeClient(cc *grpc.ClientConn) PrimeClient {
	return &primeClient{cc}
}

func (c *primeClient) Primes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (Prime_PrimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Prime_serviceDesc.Streams[0], "/calpb.prime/primes", opts...)
	if err != nil {
		return nil, err
	}
	x := &primePrimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prime_PrimesClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type primePrimesClient struct {
	grpc.ClientStream
}

func (x *primePrimesClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeServer is the server API for Prime service.
type PrimeServer interface {
	Primes(*PrimeRequest, Prime_PrimesServer) error
}

// UnimplementedPrimeServer can be embedded to have forward compatible implementations.
type UnimplementedPrimeServer struct {
}

func (*UnimplementedPrimeServer) Primes(req *PrimeRequest, srv Prime_PrimesServer) error {
	return status.Errorf(codes.Unimplemented, "method Primes not implemented")
}

func RegisterPrimeServer(s *grpc.Server, srv PrimeServer) {
	s.RegisterService(&_Prime_serviceDesc, srv)
}

func _Prime_Primes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeServer).Primes(m, &primePrimesServer{stream})
}

type Prime_PrimesServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type primePrimesServer struct {
	grpc.ServerStream
}

func (x *primePrimesServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Prime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calpb.prime",
	HandlerType: (*PrimeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "primes",
			Handler:       _Prime_Primes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calculator/calpb/calculator.proto",
}
